---
name: Build and Push Golang Image to AWS ECR
on:
  push:
    branches: [ main ]

jobs:
  hf-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  build-and-push:
    name: Build and Push to ECR
    runs-on: [self-hosted, linux, x64]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure credentials AWS ECR
      uses: aws-actions/configure-aws-credentials@v3
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE }}
         
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create .env
      run: |
         echo "AWS_REGISTRY_URL=${{ secrets.AWS_ECR_URL }}\n" >> .env
         echo "AWS_REGISTRY_API_URL=${{ secrets.REPOSITORY_API_URL }}\n" >> .env
         echo "AWS_REGISTRY_POSTGRES_URL=${{ secrets.REPOSITORY_POSTGRES_URL }}\n" >> .env
         echo "AWS_REGISTRY_SWAGGER_URL=${{ secrets.REPOSITORY_SWAGGER_URL }}\n" >> .env
         echo "DB_HOST=${{ secrets.DB_HOST }}\n" >> .env
         echo "DB_PORT=${{ secrets.DB_PORT }}\n" >> .env
         echo "DB_USER=${{ secrets.DB_USER }}\n" >> .env
         echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}\n" >> .env
         echo "DB_NAME=${{ secrets.DB_NAME }}\n" >> .env
         echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}\n" >> .env
         echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\n" >> .env
         echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}\n" >> .env
         echo "API_TOKEN=${{ secrets.API_TOKEN }}\n" >> .env
         echo "MERCADO_PAGO_API_HOST=${{ secrets.MERCADO_PAGO_API_HOST }}\n" >> .env
         echo "MERCADO_PAGO_API_PORT=${{ secrets.MERCADO_PAGO_API_PORT }}\n" >> .env
         echo "MERCADO_PAGO_API_URI=${{ secrets.MERCADO_PAGO_API_URI }}\n" >> .env
         echo "MERCADO_PAGO_API_TIMEOUT=${{ secrets.MERCADO_PAGO_API_TIMEOUT }}\n" >> .env
         echo "BASE_URL=${{ secrets.BASE_URL }}\n" >> .env
         echo "SWAGGER_JSON=${{ secrets.SWAGGER_JSON }}\n" >> .env
         
          if [ -d $HOME/envs ]; then 
            echo ""
          else
            mkdir $HOME/envs
          fi
          cp .env $HOME/envs
      shell: bash
        
    - name: Create docker network
      run: | 
          ls -la
          ./infrastructure/scripts/docker-network.sh
      shell: bash

    - name: Build, Tag, and Push the GO image to Amazon ECR
      id: build-image-go
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hermes-foods-go
        IMAGE_TAG: latest
      run: |
        docker build -f ./infrastructure/docker/go/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, Tag, and Push the Postgres image to Amazon ECR
      id: build-image-postgres
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hermes-foods-postgres
        IMAGE_TAG: latest
      run: |
        docker build -f ./infrastructure/docker/go/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


    - name: Build, Tag, and Push the Swagger image to Amazon ECR
      id: build-image-swagger
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hermes-foods-swagger
        IMAGE_TAG: latest
      run: |
        docker build -f ./infrastructure/docker/go/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set up kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

    - name: K8s setup
      run: | 
          kubectl apply -f ./infrastructure/kubernetes/config/swagger.yaml
          kubectl apply -f ./infrastructure/kubernetes/config/init-db.yaml
          kubectl apply -f ./infrastructure/kubernetes/config/postgres.yaml
          kubectl apply -f ./infrastructure/kubernetes/deployment/app.yaml
          kubectl apply -f ./infrastructure/kubernetes/deployment/postgres.yaml
          kubectl apply -f ./infrastructure/kubernetes/deployment/swagger.yaml
          kubectl apply -f ./infrastructure/kubernetes/hpa/app.yaml
          kubectl apply -f ./infrastructure/kubernetes/hpa/swagger.yaml
      shell: bash

    - name: Update pods
      run: | 
          kubectl rollout restart deployment hermes-foods-go-deployment -n dev
          kubectl rollout restart deployment hermes-foods-postgres-deployment -n dev
          kubectl rollout restart deployment hermes-foods-swagger-deployment -n dev
      shell: bash
